/*! © 2022 imaoki | MIT License | https://github.com/imaoki */
/*-
設定ファイルの管理を行う。
*/
struct ConfigStruct (
  /*- @prop <String|UndefinedClass> 作成パラメータ1。保存先ファイルのパス。既定値は`undefined`。 */
  public _CP1_,

  /*- @prop <String|UndefinedClass> 保存先ファイルのパス。既定値は`undefined`。 */
  private filePath,
  /*- @prop <Dictionary <Name> <Any>> 値の辞書。既定値は`undefined`。 */
  private table,

  /*- @prop <DotNetClass:System.DateTime> */
  private dateTimeClass = DotNetClass "System.DateTime",
  /*- @prop <Struct:FileUtilityStruct> */
  private fileUtility,
  /*- @prop <Struct:PathUtilityStruct> */
  private pathUtility,
  /*- @prop <Struct:StringUtilityStruct> */
  private stringUtility,

  /*
  public fn AddValue key v = (),
  public fn Clear = (),
  public fn Count = (),
  public fn GetFilePath = (),
  public fn GetKeys = (),
  public fn GetValue key default:undefined = (),
  public fn HasValue key = (),
  public fn Load = (),
  public fn Save = (),
  public fn SetFilePath input = (),

  private fn isValidFilePath obj = (),
  */

  /*-
  値を追加する。
  @param key <Name>
  @param v <Any>
  @returns <BooleanClass> キーが存在する場合は`true`、存在しない場合は`false`。
  */
  public fn AddValue key v = (
    if classOf key == Name do (
      this.table[key] = v
    )
    this.HasValue key
  ),

  /*-
  内容を全て消去する。
  @returns <OkClass>
  */
  public fn Clear = (
    free this.table
    ok
  ),

  /*-
  値の総数を取得する。
  @returns <Integer>
  */
  public fn Count = (
    this.table.Count
  ),

  /*-
  保存先ファイルのパスを取得する。
  @returns <String|UndefinedClass>
  */
  public fn GetFilePath = (
    this.filePath
  ),

  /*-
  全てのキーを取得する。
  @returns <Array[<Name>]>
  @remarks キーの並びは通常の`sort`関数で昇順にソートされる。
  */
  public fn GetKeys = (
    sort (copy this.table.Keys #NoMap)
  ),

  /*-
  値を取得する。
  @param key <Name>
  @param default: <Any> キーが存在しない場合に返す値。既定値は`undefined`。
  @returns <Any>
  */
  public fn GetValue key default:undefined = (
    if this.HasValue key then (
      this.table[key]
    )
    else (
      default
    )
  ),

  /*-
  キーが存在するかどうかを取得する。
  @param key <Name>
  @returns <BooleanClass>
  */
  public fn HasValue key = (
    classOf key == Name and hasDictValue this.table key
  ),

  /*-
  保存先ファイルの内容を読み込んで内部状態を更新する。
  @returns <BooleanClass> 読み込みに成功した場合は`true`、失敗した場合は`false`。
  @remarks 保存先ファイルのパスが無効の場合は何もしない。
  */
  public fn Load = (
    local isSuccessful = false
    if this.isValidFilePath this.filePath \
        and this.fileUtility.FileExists this.filePath do (
      local pattern = "* ?/\n(Dictionary #Name *"
      local content = this.fileUtility.ReadAllText this.filePath
      if classOf content == String \
          and matchPattern content pattern:pattern ignoreCase:true do (
        this.table = execute content
        isSuccessful = true
      )
    )
    isSuccessful
  ),

  /*-
  内容を保存先ファイルに書き出す。
  @returns <BooleanClass> 書き出しに成功した場合は`true`、失敗した場合は`false`。
  @remarks 保存先ファイルのパスが無効の場合は何もしない。
  */
  public fn Save = (
    local isSuccessful = false
    if this.isValidFilePath this.filePath then (
      local content = StringStream ""
      local now = this.dateTimeClass.Now.ToString "yyyy/MM/dd HH:mm:ss K"
      format "/* Generated by ConfigStruct at % */\n" now to:content
      format "%\n" (this.stringUtility.Serialize this.table) to:content
      content = content as String
      this.fileUtility.WriteAllText this.filePath content
      isSuccessful = this.fileUtility.FileExists this.filePath
    )
    isSuccessful
  ),

  /*-
  保存先ファイルのパスを設定する。
  @param input <String|UndefinedClass> 拡張子を含むファイルパス。
  @returns <String|UndefinedClass>
  @remarks ファイルの拡張子は`.mxsconfig`に置き換えられる。
  */
  public fn SetFilePath input = (
    if this.isValidFilePath input do (
      local dirName = this.pathUtility.GetDirectoryName input
      local fileNameWE = this.pathUtility.GetFileNameWithoutExtension input
      this.filePath = dirName + @"\" + fileNameWE + ".mxsconfig"
    )
    this.GetFilePath()
  ),

  /*-
  @param obj <Any>
  @returns <BooleanClass>
  */
  private fn isValidFilePath obj = (
    classOf obj == String and this.pathUtility.HasExtension obj
  ),

  /*- @returns <Name> */
  public fn StructName = #ConfigStruct,

  /*-
  @param indent: <String>
  @param out: <FileStream|StringStream|WindowStream> 出力先。既定値は`listener`。
  @returns <OkClass>
  */
  public fn Dump indent:"" out:listener = (
    format "%ConfigStruct\n" indent to:out
    if classOf this.filePath == String then (
      format "%  filePath:@\"%\"\n" indent this.filePath to:out
    )
    else (
      format "%  filePath:%\n" indent this.filePath to:out
    )
    format "%  table:%\n" indent (this.stringUtility.Serialize this.table) to:out
    ok
  ),

  /*-
  @param obj <Any>
  @returns <BooleanClass>
  @remarks 大文字と小文字を区別する。
  */
  public fn Equals obj = (
    local isEqualStructName = isStruct obj \
        and isProperty obj #StructName \
        and classOf obj.StructName == MAXScriptFunction \
        and obj.StructName() == this.StructName()

    local isEqualProperties = true

    isEqualStructName and isEqualProperties
  ),

  on Create do (
    this.fileUtility = (::standardDefinitionPool[@"FileUtility.ms"])()
    this.pathUtility = (::standardDefinitionPool[@"PathUtility.ms"]) (getSourceFileName())
    this.stringUtility = (::standardDefinitionPool[@"StringUtility.ms"])()
    this.table = Dictionary #Name
    this.SetFilePath this._CP1_
  )
)
